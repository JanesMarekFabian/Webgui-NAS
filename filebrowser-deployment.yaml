# =============================================================================
# MINIO + FILEBROWSER - S3-API STORAGE MIT EINFACHEM WEB-INTERFACE
# =============================================================================
# MinIO als S3-kompatible Storage-LÃ¶sung mit FileBrowser als einfachem Web-Interface

apiVersion: v1
kind: Namespace
metadata:
  name: storage
  labels:
    app: filebrowser
    component: storage
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-data-pvc
  namespace: storage
  labels:
    app: minio
    component: storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: local-path
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: filebrowser-config-pvc
  namespace: storage
  labels:
    app: filebrowser
    component: storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: local-path
---
# MinIO Deployment (Backend)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: storage
  labels:
    app: minio
    component: storage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
      component: storage
  template:
    metadata:
      labels:
        app: minio
        component: storage
    spec:
      containers:
      - name: minio
        image: minio/minio:latest
        args:
        - server
        - /data
        env:
        - name: MINIO_ROOT_USER
          value: "admin"
        - name: MINIO_ROOT_PASSWORD
          value: "minio123"
        ports:
        - containerPort: 9000
          name: api
        volumeMounts:
        - name: minio-data
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /minio/health/live
            port: 9000
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /minio/health/ready
            port: 9000
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: minio-data
        persistentVolumeClaim:
          claimName: minio-data-pvc
      restartPolicy: Always
---
# FileBrowser Deployment (Frontend)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: filebrowser
  namespace: storage
  labels:
    app: filebrowser
    component: storage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: filebrowser
      component: storage
  template:
    metadata:
      labels:
        app: filebrowser
        component: storage
    spec:
      containers:
      - name: filebrowser
        image: filebrowser/filebrowser:latest
        ports:
        - containerPort: 80
          name: http
        env:
        - name: FB_DATABASE
          value: "/config/database.db"
        - name: FB_ROOT
          value: "/srv"
        - name: FB_PORT
          value: "80"
        - name: FB_BASEURL
          value: "/"
        volumeMounts:
        - name: filebrowser-config
          mountPath: /config
        - name: minio-data
          mountPath: /srv
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: filebrowser-config
        persistentVolumeClaim:
          claimName: filebrowser-config-pvc
      - name: minio-data
        persistentVolumeClaim:
          claimName: minio-data-pvc
      restartPolicy: Always
---
# MinIO Service
apiVersion: v1
kind: Service
metadata:
  name: minio-service
  namespace: storage
  labels:
    app: minio
    component: storage
spec:
  selector:
    app: minio
    component: storage
  ports:
  - name: api
    port: 9000
    targetPort: 9000
    protocol: TCP
  type: ClusterIP
---
# FileBrowser Service
apiVersion: v1
kind: Service
metadata:
  name: filebrowser-service
  namespace: storage
  labels:
    app: filebrowser
    component: storage
spec:
  selector:
    app: filebrowser
    component: storage
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  type: NodePort
---
# FileBrowser Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: filebrowser-ingress
  namespace: storage
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/proxy-body-size: "2048m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
spec:
  rules:
  - host: files.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: filebrowser-service
            port:
              number: 80
